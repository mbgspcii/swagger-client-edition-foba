<?php
/**
 * EvolutionEpargne
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * EvolutionEpargne Class Doc Comment
 *
 * @category    Class
 * @description epargne acquise pour une annee donn\u00E9e
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EvolutionEpargne implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'annee' => 'int',
        'date_resultat' => '\DateTime',
        'cumul_versements_bruts' => '\Swagger\Client\Model\Montant',
        'cumul_versements_nets' => '\Swagger\Client\Model\Montant',
        'cumul_interets' => '\Swagger\Client\Model\Montant',
        'capital_obtenu' => '\Swagger\Client\Model\Montant',
        'cumul_economie_impots' => '\Swagger\Client\Model\Montant'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'annee' => 'annee',
        'date_resultat' => 'dateResultat',
        'cumul_versements_bruts' => 'cumulVersementsBruts',
        'cumul_versements_nets' => 'cumulVersementsNets',
        'cumul_interets' => 'cumulInterets',
        'capital_obtenu' => 'CapitalObtenu',
        'cumul_economie_impots' => 'cumulEconomieImpots'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'annee' => 'setAnnee',
        'date_resultat' => 'setDateResultat',
        'cumul_versements_bruts' => 'setCumulVersementsBruts',
        'cumul_versements_nets' => 'setCumulVersementsNets',
        'cumul_interets' => 'setCumulInterets',
        'capital_obtenu' => 'setCapitalObtenu',
        'cumul_economie_impots' => 'setCumulEconomieImpots'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'annee' => 'getAnnee',
        'date_resultat' => 'getDateResultat',
        'cumul_versements_bruts' => 'getCumulVersementsBruts',
        'cumul_versements_nets' => 'getCumulVersementsNets',
        'cumul_interets' => 'getCumulInterets',
        'capital_obtenu' => 'getCapitalObtenu',
        'cumul_economie_impots' => 'getCumulEconomieImpots'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $annee 
      * @var int
      */
    protected $annee;
    
    /**
      * $date_resultat date de situation
      * @var \DateTime
      */
    protected $date_resultat;
    
    /**
      * $cumul_versements_bruts somme des versements bruts effectu\u00E9s depuis le d\u00E9but de la simulation jusqu'\u00E0 la date de situation
      * @var \Swagger\Client\Model\Montant
      */
    protected $cumul_versements_bruts;
    
    /**
      * $cumul_versements_nets somme des versements nets effectu\u00E9s depuis le d\u00E9but de la simulation jusqu'\u00E0 la date de situation
      * @var \Swagger\Client\Model\Montant
      */
    protected $cumul_versements_nets;
    
    /**
      * $cumul_interets somme des int\u00E9r\u00EAts acquis depuis le d\u00E9but de la simulation jusqu'\u00E0 la date de situation
      * @var \Swagger\Client\Model\Montant
      */
    protected $cumul_interets;
    
    /**
      * $capital_obtenu capital obtenu
      * @var \Swagger\Client\Model\Montant
      */
    protected $capital_obtenu;
    
    /**
      * $cumul_economie_impots somme des \u00E9conomies d''imp\u00F4t obtenus depuis le d\u00E9but de la simulation jusqu'\u00E0 la date de situation
      * @var \Swagger\Client\Model\Montant
      */
    protected $cumul_economie_impots;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->annee = $data["annee"];
            $this->date_resultat = $data["date_resultat"];
            $this->cumul_versements_bruts = $data["cumul_versements_bruts"];
            $this->cumul_versements_nets = $data["cumul_versements_nets"];
            $this->cumul_interets = $data["cumul_interets"];
            $this->capital_obtenu = $data["capital_obtenu"];
            $this->cumul_economie_impots = $data["cumul_economie_impots"];
        }
    }
    
    /**
     * Gets annee
     * @return int
     */
    public function getAnnee()
    {
        return $this->annee;
    }
  
    /**
     * Sets annee
     * @param int $annee 
     * @return $this
     */
    public function setAnnee($annee)
    {
        
        $this->annee = $annee;
        return $this;
    }
    
    /**
     * Gets date_resultat
     * @return \DateTime
     */
    public function getDateResultat()
    {
        return $this->date_resultat;
    }
  
    /**
     * Sets date_resultat
     * @param \DateTime $date_resultat date de situation
     * @return $this
     */
    public function setDateResultat($date_resultat)
    {
        
        $this->date_resultat = $date_resultat;
        return $this;
    }
    
    /**
     * Gets cumul_versements_bruts
     * @return \Swagger\Client\Model\Montant
     */
    public function getCumulVersementsBruts()
    {
        return $this->cumul_versements_bruts;
    }
  
    /**
     * Sets cumul_versements_bruts
     * @param \Swagger\Client\Model\Montant $cumul_versements_bruts somme des versements bruts effectu\u00E9s depuis le d\u00E9but de la simulation jusqu'\u00E0 la date de situation
     * @return $this
     */
    public function setCumulVersementsBruts($cumul_versements_bruts)
    {
        
        $this->cumul_versements_bruts = $cumul_versements_bruts;
        return $this;
    }
    
    /**
     * Gets cumul_versements_nets
     * @return \Swagger\Client\Model\Montant
     */
    public function getCumulVersementsNets()
    {
        return $this->cumul_versements_nets;
    }
  
    /**
     * Sets cumul_versements_nets
     * @param \Swagger\Client\Model\Montant $cumul_versements_nets somme des versements nets effectu\u00E9s depuis le d\u00E9but de la simulation jusqu'\u00E0 la date de situation
     * @return $this
     */
    public function setCumulVersementsNets($cumul_versements_nets)
    {
        
        $this->cumul_versements_nets = $cumul_versements_nets;
        return $this;
    }
    
    /**
     * Gets cumul_interets
     * @return \Swagger\Client\Model\Montant
     */
    public function getCumulInterets()
    {
        return $this->cumul_interets;
    }
  
    /**
     * Sets cumul_interets
     * @param \Swagger\Client\Model\Montant $cumul_interets somme des int\u00E9r\u00EAts acquis depuis le d\u00E9but de la simulation jusqu'\u00E0 la date de situation
     * @return $this
     */
    public function setCumulInterets($cumul_interets)
    {
        
        $this->cumul_interets = $cumul_interets;
        return $this;
    }
    
    /**
     * Gets capital_obtenu
     * @return \Swagger\Client\Model\Montant
     */
    public function getCapitalObtenu()
    {
        return $this->capital_obtenu;
    }
  
    /**
     * Sets capital_obtenu
     * @param \Swagger\Client\Model\Montant $capital_obtenu capital obtenu
     * @return $this
     */
    public function setCapitalObtenu($capital_obtenu)
    {
        
        $this->capital_obtenu = $capital_obtenu;
        return $this;
    }
    
    /**
     * Gets cumul_economie_impots
     * @return \Swagger\Client\Model\Montant
     */
    public function getCumulEconomieImpots()
    {
        return $this->cumul_economie_impots;
    }
  
    /**
     * Sets cumul_economie_impots
     * @param \Swagger\Client\Model\Montant $cumul_economie_impots somme des \u00E9conomies d''imp\u00F4t obtenus depuis le d\u00E9but de la simulation jusqu'\u00E0 la date de situation
     * @return $this
     */
    public function setCumulEconomieImpots($cumul_economie_impots)
    {
        
        $this->cumul_economie_impots = $cumul_economie_impots;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
