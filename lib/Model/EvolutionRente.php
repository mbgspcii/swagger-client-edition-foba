<?php
/**
 * EvolutionRente
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * EvolutionRente Class Doc Comment
 *
 * @category    Class
 * @description rente mensuelle acquise \u00E0 un \u00E2ge donn\u00E9
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EvolutionRente implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'annee' => 'int',
        'age' => 'int',
        'rente_nette_ps' => '\Swagger\Client\Model\Montant'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'annee' => 'annee',
        'age' => 'age',
        'rente_nette_ps' => 'renteNettePS'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'annee' => 'setAnnee',
        'age' => 'setAge',
        'rente_nette_ps' => 'setRenteNettePs'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'annee' => 'getAnnee',
        'age' => 'getAge',
        'rente_nette_ps' => 'getRenteNettePs'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $annee ann\u00E9e consid\u00E9r\u00E9e
      * @var int
      */
    protected $annee;
    
    /**
      * $age \u00E2ge du souscripteur \u00E0 l'ann\u00E9e consid\u00E9r\u00E9e
      * @var int
      */
    protected $age;
    
    /**
      * $rente_nette_ps montant de la rente mensuelle nette de pr\u00E9l\u00E8vements sociaux
      * @var \Swagger\Client\Model\Montant
      */
    protected $rente_nette_ps;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->annee = $data["annee"];
            $this->age = $data["age"];
            $this->rente_nette_ps = $data["rente_nette_ps"];
        }
    }
    
    /**
     * Gets annee
     * @return int
     */
    public function getAnnee()
    {
        return $this->annee;
    }
  
    /**
     * Sets annee
     * @param int $annee ann\u00E9e consid\u00E9r\u00E9e
     * @return $this
     */
    public function setAnnee($annee)
    {
        
        $this->annee = $annee;
        return $this;
    }
    
    /**
     * Gets age
     * @return int
     */
    public function getAge()
    {
        return $this->age;
    }
  
    /**
     * Sets age
     * @param int $age \u00E2ge du souscripteur \u00E0 l'ann\u00E9e consid\u00E9r\u00E9e
     * @return $this
     */
    public function setAge($age)
    {
        
        $this->age = $age;
        return $this;
    }
    
    /**
     * Gets rente_nette_ps
     * @return \Swagger\Client\Model\Montant
     */
    public function getRenteNettePs()
    {
        return $this->rente_nette_ps;
    }
  
    /**
     * Sets rente_nette_ps
     * @param \Swagger\Client\Model\Montant $rente_nette_ps montant de la rente mensuelle nette de pr\u00E9l\u00E8vements sociaux
     * @return $this
     */
    public function setRenteNettePs($rente_nette_ps)
    {
        
        $this->rente_nette_ps = $rente_nette_ps;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
