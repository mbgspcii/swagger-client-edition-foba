<?php
/**
 * Personne
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Personne Class Doc Comment
 *
 * @category    Class
 * @description personne sur laquelle porte la simulation
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Personne implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'sexe' => 'string',
        'date_naissance' => '\DateTime',
        'nombre_enfants' => 'int',
        'statut_maritale' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'sexe' => 'sexe',
        'date_naissance' => 'dateNaissance',
        'nombre_enfants' => 'nombreEnfants',
        'statut_maritale' => 'statutMaritale'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'sexe' => 'setSexe',
        'date_naissance' => 'setDateNaissance',
        'nombre_enfants' => 'setNombreEnfants',
        'statut_maritale' => 'setStatutMaritale'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'sexe' => 'getSexe',
        'date_naissance' => 'getDateNaissance',
        'nombre_enfants' => 'getNombreEnfants',
        'statut_maritale' => 'getStatutMaritale'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $sexe M pour Masculin F pour F\u00E9minin
      * @var string
      */
    protected $sexe;
    
    /**
      * $date_naissance date de naissance
      * @var \DateTime
      */
    protected $date_naissance;
    
    /**
      * $nombre_enfants nombre d'enfants \u00E9lev\u00E9s
      * @var int
      */
    protected $nombre_enfants;
    
    /**
      * $statut_maritale statut maritale (C\u00E9libataire/Mari\u00E9/Pacs\u00E9/Concubin/Divorc\u00E9/Veuf)
      * @var string
      */
    protected $statut_maritale;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->sexe = $data["sexe"];
            $this->date_naissance = $data["date_naissance"];
            $this->nombre_enfants = $data["nombre_enfants"];
            $this->statut_maritale = $data["statut_maritale"];
        }
    }
    
    /**
     * Gets sexe
     * @return string
     */
    public function getSexe()
    {
        return $this->sexe;
    }
  
    /**
     * Sets sexe
     * @param string $sexe M pour Masculin F pour F\u00E9minin
     * @return $this
     */
    public function setSexe($sexe)
    {
        
        $this->sexe = $sexe;
        return $this;
    }
    
    /**
     * Gets date_naissance
     * @return \DateTime
     */
    public function getDateNaissance()
    {
        return $this->date_naissance;
    }
  
    /**
     * Sets date_naissance
     * @param \DateTime $date_naissance date de naissance
     * @return $this
     */
    public function setDateNaissance($date_naissance)
    {
        
        $this->date_naissance = $date_naissance;
        return $this;
    }
    
    /**
     * Gets nombre_enfants
     * @return int
     */
    public function getNombreEnfants()
    {
        return $this->nombre_enfants;
    }
  
    /**
     * Sets nombre_enfants
     * @param int $nombre_enfants nombre d'enfants \u00E9lev\u00E9s
     * @return $this
     */
    public function setNombreEnfants($nombre_enfants)
    {
        
        $this->nombre_enfants = $nombre_enfants;
        return $this;
    }
    
    /**
     * Gets statut_maritale
     * @return string
     */
    public function getStatutMaritale()
    {
        return $this->statut_maritale;
    }
  
    /**
     * Sets statut_maritale
     * @param string $statut_maritale statut maritale (C\u00E9libataire/Mari\u00E9/Pacs\u00E9/Concubin/Divorc\u00E9/Veuf)
     * @return $this
     */
    public function setStatutMaritale($statut_maritale)
    {
        
        $this->statut_maritale = $statut_maritale;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
