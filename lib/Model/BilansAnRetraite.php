<?php
/**
 * BilansAnRetraite
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * BilansAnRetraite Class Doc Comment
 *
 * @category    Class
 * @description pensions calcul\u00E9es aux diff\u00E9rents \u00E2ges
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BilansAnRetraite implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'date_taux_plein' => '\DateTime',
        'nombre_trimestres_requispour_taux_plein' => 'int',
        'bilan_an_retraite' => '\Swagger\Client\Model\BilanAnRetraite[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'date_taux_plein' => 'dateTauxPlein',
        'nombre_trimestres_requispour_taux_plein' => 'nombreTrimestresRequispourTauxPlein',
        'bilan_an_retraite' => 'bilanAnRetraite'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'date_taux_plein' => 'setDateTauxPlein',
        'nombre_trimestres_requispour_taux_plein' => 'setNombreTrimestresRequispourTauxPlein',
        'bilan_an_retraite' => 'setBilanAnRetraite'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'date_taux_plein' => 'getDateTauxPlein',
        'nombre_trimestres_requispour_taux_plein' => 'getNombreTrimestresRequispourTauxPlein',
        'bilan_an_retraite' => 'getBilanAnRetraite'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $date_taux_plein date atteinte taux plein dans r\u00E9gimes base
      * @var \DateTime
      */
    protected $date_taux_plein;
    
    /**
      * $nombre_trimestres_requispour_taux_plein nombre de trimestres requis pour obtenir le taux plein
      * @var int
      */
    protected $nombre_trimestres_requispour_taux_plein;
    
    /**
      * $bilan_an_retraite 
      * @var \Swagger\Client\Model\BilanAnRetraite[]
      */
    protected $bilan_an_retraite;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->date_taux_plein = $data["date_taux_plein"];
            $this->nombre_trimestres_requispour_taux_plein = $data["nombre_trimestres_requispour_taux_plein"];
            $this->bilan_an_retraite = $data["bilan_an_retraite"];
        }
    }
    
    /**
     * Gets date_taux_plein
     * @return \DateTime
     */
    public function getDateTauxPlein()
    {
        return $this->date_taux_plein;
    }
  
    /**
     * Sets date_taux_plein
     * @param \DateTime $date_taux_plein date atteinte taux plein dans r\u00E9gimes base
     * @return $this
     */
    public function setDateTauxPlein($date_taux_plein)
    {
        
        $this->date_taux_plein = $date_taux_plein;
        return $this;
    }
    
    /**
     * Gets nombre_trimestres_requispour_taux_plein
     * @return int
     */
    public function getNombreTrimestresRequispourTauxPlein()
    {
        return $this->nombre_trimestres_requispour_taux_plein;
    }
  
    /**
     * Sets nombre_trimestres_requispour_taux_plein
     * @param int $nombre_trimestres_requispour_taux_plein nombre de trimestres requis pour obtenir le taux plein
     * @return $this
     */
    public function setNombreTrimestresRequispourTauxPlein($nombre_trimestres_requispour_taux_plein)
    {
        
        $this->nombre_trimestres_requispour_taux_plein = $nombre_trimestres_requispour_taux_plein;
        return $this;
    }
    
    /**
     * Gets bilan_an_retraite
     * @return \Swagger\Client\Model\BilanAnRetraite[]
     */
    public function getBilanAnRetraite()
    {
        return $this->bilan_an_retraite;
    }
  
    /**
     * Sets bilan_an_retraite
     * @param \Swagger\Client\Model\BilanAnRetraite[] $bilan_an_retraite 
     * @return $this
     */
    public function setBilanAnRetraite($bilan_an_retraite)
    {
        
        $this->bilan_an_retraite = $bilan_an_retraite;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
