<?php
/**
 * DisponiblesFiscaux
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * DisponiblesFiscaux Class Doc Comment
 *
 * @category    Class
 * @description contient les diff\u00E9rents disponibles Madelin ou Perp
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DisponiblesFiscaux implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'taux_marginal_imposition' => 'float',
        'charges_deductibles' => '\Swagger\Client\Model\Montant',
        'nb_parts_fiscales' => 'float',
        'disponible_fiscal_madelin' => '\Swagger\Client\Model\DisponibleFiscalMadelin',
        'disponible_fiscal_perp' => '\Swagger\Client\Model\DisponibleFiscalPERP'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'taux_marginal_imposition' => 'tauxMarginalImposition',
        'charges_deductibles' => 'chargesDeductibles',
        'nb_parts_fiscales' => 'nbPartsFiscales',
        'disponible_fiscal_madelin' => 'disponibleFiscalMadelin',
        'disponible_fiscal_perp' => 'disponibleFiscalPERP'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'taux_marginal_imposition' => 'setTauxMarginalImposition',
        'charges_deductibles' => 'setChargesDeductibles',
        'nb_parts_fiscales' => 'setNbPartsFiscales',
        'disponible_fiscal_madelin' => 'setDisponibleFiscalMadelin',
        'disponible_fiscal_perp' => 'setDisponibleFiscalPerp'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'taux_marginal_imposition' => 'getTauxMarginalImposition',
        'charges_deductibles' => 'getChargesDeductibles',
        'nb_parts_fiscales' => 'getNbPartsFiscales',
        'disponible_fiscal_madelin' => 'getDisponibleFiscalMadelin',
        'disponible_fiscal_perp' => 'getDisponibleFiscalPerp'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $taux_marginal_imposition TMI du foyer exprim\u00E9 en centi\u00E8me
      * @var float
      */
    protected $taux_marginal_imposition;
    
    /**
      * $charges_deductibles charges d\u00E9ductibles du foyer
      * @var \Swagger\Client\Model\Montant
      */
    protected $charges_deductibles;
    
    /**
      * $nb_parts_fiscales nombre de parts fiscales servant \u00E0 determination TMI
      * @var float
      */
    protected $nb_parts_fiscales;
    
    /**
      * $disponible_fiscal_madelin contient les informations li\u00E9es au disponible fiscal MADELIN
      * @var \Swagger\Client\Model\DisponibleFiscalMadelin
      */
    protected $disponible_fiscal_madelin;
    
    /**
      * $disponible_fiscal_perp contient les informations li\u00E9es au disponible fiscal PERP
      * @var \Swagger\Client\Model\DisponibleFiscalPERP
      */
    protected $disponible_fiscal_perp;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->taux_marginal_imposition = $data["taux_marginal_imposition"];
            $this->charges_deductibles = $data["charges_deductibles"];
            $this->nb_parts_fiscales = $data["nb_parts_fiscales"];
            $this->disponible_fiscal_madelin = $data["disponible_fiscal_madelin"];
            $this->disponible_fiscal_perp = $data["disponible_fiscal_perp"];
        }
    }
    
    /**
     * Gets taux_marginal_imposition
     * @return float
     */
    public function getTauxMarginalImposition()
    {
        return $this->taux_marginal_imposition;
    }
  
    /**
     * Sets taux_marginal_imposition
     * @param float $taux_marginal_imposition TMI du foyer exprim\u00E9 en centi\u00E8me
     * @return $this
     */
    public function setTauxMarginalImposition($taux_marginal_imposition)
    {
        
        $this->taux_marginal_imposition = $taux_marginal_imposition;
        return $this;
    }
    
    /**
     * Gets charges_deductibles
     * @return \Swagger\Client\Model\Montant
     */
    public function getChargesDeductibles()
    {
        return $this->charges_deductibles;
    }
  
    /**
     * Sets charges_deductibles
     * @param \Swagger\Client\Model\Montant $charges_deductibles charges d\u00E9ductibles du foyer
     * @return $this
     */
    public function setChargesDeductibles($charges_deductibles)
    {
        
        $this->charges_deductibles = $charges_deductibles;
        return $this;
    }
    
    /**
     * Gets nb_parts_fiscales
     * @return float
     */
    public function getNbPartsFiscales()
    {
        return $this->nb_parts_fiscales;
    }
  
    /**
     * Sets nb_parts_fiscales
     * @param float $nb_parts_fiscales nombre de parts fiscales servant \u00E0 determination TMI
     * @return $this
     */
    public function setNbPartsFiscales($nb_parts_fiscales)
    {
        
        $this->nb_parts_fiscales = $nb_parts_fiscales;
        return $this;
    }
    
    /**
     * Gets disponible_fiscal_madelin
     * @return \Swagger\Client\Model\DisponibleFiscalMadelin
     */
    public function getDisponibleFiscalMadelin()
    {
        return $this->disponible_fiscal_madelin;
    }
  
    /**
     * Sets disponible_fiscal_madelin
     * @param \Swagger\Client\Model\DisponibleFiscalMadelin $disponible_fiscal_madelin contient les informations li\u00E9es au disponible fiscal MADELIN
     * @return $this
     */
    public function setDisponibleFiscalMadelin($disponible_fiscal_madelin)
    {
        
        $this->disponible_fiscal_madelin = $disponible_fiscal_madelin;
        return $this;
    }
    
    /**
     * Gets disponible_fiscal_perp
     * @return \Swagger\Client\Model\DisponibleFiscalPERP
     */
    public function getDisponibleFiscalPerp()
    {
        return $this->disponible_fiscal_perp;
    }
  
    /**
     * Sets disponible_fiscal_perp
     * @param \Swagger\Client\Model\DisponibleFiscalPERP $disponible_fiscal_perp contient les informations li\u00E9es au disponible fiscal PERP
     * @return $this
     */
    public function setDisponibleFiscalPerp($disponible_fiscal_perp)
    {
        
        $this->disponible_fiscal_perp = $disponible_fiscal_perp;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
