<?php
/**
 * DisponibleFiscalMadelin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * DisponibleFiscalMadelin Class Doc Comment
 *
 * @category    Class
 * @description donn\u00E9es li\u00E9es au disponible fiscal cadre MADELIN
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DisponibleFiscalMadelin implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'versements_perco' => '\Swagger\Client\Model\Montant',
        'disponible_retraite' => '\Swagger\Client\Model\Montant',
        'disponible_prevoyance' => '\Swagger\Client\Model\Montant'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'versements_perco' => 'versementsPERCO',
        'disponible_retraite' => 'disponibleRetraite',
        'disponible_prevoyance' => 'disponiblePrevoyance'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'versements_perco' => 'setVersementsPerco',
        'disponible_retraite' => 'setDisponibleRetraite',
        'disponible_prevoyance' => 'setDisponiblePrevoyance'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'versements_perco' => 'getVersementsPerco',
        'disponible_retraite' => 'getDisponibleRetraite',
        'disponible_prevoyance' => 'getDisponiblePrevoyance'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $versements_perco abondement de l'employeur sur PERCO car affecte le disponibleVoletReraite
      * @var \Swagger\Client\Model\Montant
      */
    protected $versements_perco;
    
    /**
      * $disponible_retraite plafond annuel des cotisations d\u00E9ductibles au titre de la Retraite dans le cadre d'un MADELIN
      * @var \Swagger\Client\Model\Montant
      */
    protected $disponible_retraite;
    
    /**
      * $disponible_prevoyance plafond annuel des cotisations d\u00E9ductibles au titre de la Prevoyance dans le cadre d'un MADELIN
      * @var \Swagger\Client\Model\Montant
      */
    protected $disponible_prevoyance;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->versements_perco = $data["versements_perco"];
            $this->disponible_retraite = $data["disponible_retraite"];
            $this->disponible_prevoyance = $data["disponible_prevoyance"];
        }
    }
    
    /**
     * Gets versements_perco
     * @return \Swagger\Client\Model\Montant
     */
    public function getVersementsPerco()
    {
        return $this->versements_perco;
    }
  
    /**
     * Sets versements_perco
     * @param \Swagger\Client\Model\Montant $versements_perco abondement de l'employeur sur PERCO car affecte le disponibleVoletReraite
     * @return $this
     */
    public function setVersementsPerco($versements_perco)
    {
        
        $this->versements_perco = $versements_perco;
        return $this;
    }
    
    /**
     * Gets disponible_retraite
     * @return \Swagger\Client\Model\Montant
     */
    public function getDisponibleRetraite()
    {
        return $this->disponible_retraite;
    }
  
    /**
     * Sets disponible_retraite
     * @param \Swagger\Client\Model\Montant $disponible_retraite plafond annuel des cotisations d\u00E9ductibles au titre de la Retraite dans le cadre d'un MADELIN
     * @return $this
     */
    public function setDisponibleRetraite($disponible_retraite)
    {
        
        $this->disponible_retraite = $disponible_retraite;
        return $this;
    }
    
    /**
     * Gets disponible_prevoyance
     * @return \Swagger\Client\Model\Montant
     */
    public function getDisponiblePrevoyance()
    {
        return $this->disponible_prevoyance;
    }
  
    /**
     * Sets disponible_prevoyance
     * @param \Swagger\Client\Model\Montant $disponible_prevoyance plafond annuel des cotisations d\u00E9ductibles au titre de la Prevoyance dans le cadre d'un MADELIN
     * @return $this
     */
    public function setDisponiblePrevoyance($disponible_prevoyance)
    {
        
        $this->disponible_prevoyance = $disponible_prevoyance;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
